\subsection{Петље}
Програмери не воле много да се понављају, штавише у Python-овом "правилнику" за писање к\^{о}да, PEP\cite{PEP}\index{PEP}, постоји правило \emph{DRY}, односно \textbf{Don't Repeat Yourself}\footnote{енгл., \emph{не понављај се}}, но понекад је потребно да интерпретатор одређени блок поновљено извршава коначно много пута. Такав део програма се назива петља. Постоји више врста петљи у Python-у, овде ће бити описане две. 

\subsubsection{Петља while}

Као што дословни превод са енглеског каже, \emph{док}\index{Python!while@\emph{while}} је одређени услов испуњен, исти кодни блок се врти у петљи. Ако услов није тачан, петља се прекида и извршавање програма се наставља иза петље. Услови петље се дефинишу на претходно описани начин. На пример:

\begin{lstlisting}[caption = Пример while петље, label = while]
>>>i=1
>>>while i<=10:
       print(i)
       i=i+1
\end{lstlisting}

Ако је потребно да се изађе из петље пре него што услов постане нетачан, користи се кључна реч \emph{break}. У том случају петља се прекида и програм наставља даље да се извршава од прве наредбе која следи иза петље. 

\subsubsection{Петља for}
Ова\index{Python!for@\emph{for}} петља се користи на сличан начин као и петља \emph{while}, с тиме да се користи нова кључна реч - \emph{range}. На пример:

\begin{lstlisting}[caption = Примери \emph{for} петље, label = for]
>>>for i in range(1, 11):
      print(i) // stampaju se brojevi od 1 do 10
>>>for i in list:
      print(list[i]) //stampaju se elementi liste
\end{lstlisting}

И \emph{for} и \emph{while} петље се могу угњежђавати и то вишеструко са више петљи.
